"Object-oriented" and "functional" programming styles have often been cast as
opposing, but "polymorphism and late-binding" (the definition of
object-oriented programming) does not preclude "programming without side
effects" (the definition of functional programming). How do these styles of
program design complement each other in the small and in the large?

thesis: the exponential increase in the speed and memory capacity of computers
enables programming using immutability & referential transparency, which reduces
the primacy of frameworks (and thereby late-binding and objects) to everyday
programming practice

Dijkstra on the origins of hierarchy:

> I do not know of any other technology covering a ratio of 10^10 or more: the
> computer, by virtue of its fantastic speed, seems to be the first to provide
> us with an environment where highly hierarchical artefacts are both possible
> and necessary. 

- The Humble Programmer, 1972 
https://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html

Hickey (abridged) on the origins of mutability:

> There's a reason we do Place-Oriented Programming because way back in the
> early days of computers, we had to do Place-Oriented Programming. There
> wasn't enough capacity to do anything else. In the time that I've been doing
> programming, the capacity of these two things (RAM and disk) have increased a
> millionfold. Imagine if your car was a million times bigger than it is.
> What rules would still apply?  What characteristics would still be true?
> Almost nothing but yet, we're retaining decisions we made when things were
> much much smaller and moving forward with it.

- The Value of Values, 2012 
https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/ValueOfValues.md

when programming began, we had to do place-oriented programming - shared
mutable state was essential because of the scarcity of places. it's no longer
essential.

now we have a choice: do we share? do we mutate? when to do which?

when mutating *and* sharing, you need to think about the semantics of a shared
mutable reference - you're using the principles that guided us during
place-orientation:

shared mutable reference =>
=> small, specific, opaque interfaces with little surface area (cf posix file api?) 
   - why? help us reason about code - fewer places the state comes from
     - examples of oo principles serving this goal
=> concurrent (as opposed to parallel) abstractions 
   - why? heterogeneity and doing many different things at once - each state-bundle
     can require the composition of different procedure to manage it - concurrency 
     is about coordinating heterogenous processes
=> integration testing 
   - why? the complexity lies in the interleaving / overlaying of many procedures onto
     the same data - you must test that interleaving
   - talk about 2^N state space explosion
=> "framework" code
   - why? the integration of many different parts is extremely difficult at scale because
     of the effects of state - it's more effective to try and get the high-level organization
     right once (remember, the shape of the interleaving is key to the success of the design!)
     and allow for arbitrary code that fulfills a contract to run at the leaves of the code
     tree
=> late-binding
   - why? we want to get high-level organization right once and not spend the inordinate resources
     getting it right again - we want the organization code to be able to call the 'purposeful'
     code without knowing anything specific about what kind of 'purposeful' code we'll write
=> dynamism
   - why? enabling late-binding
     cf. "why objects are inevitable": objects were inevitable because having
     some structured way of doing dynamism, indirection & late binding is
     necessary for building frameworks
=> needs interactive development (inspection of state, repl-driven, live-coding, debuggers)
   - why? state progression is key, the state space is huge, ad-hoc reasoning and
     observation needs to be cheap!
=> high-level organization and hierarchy is critical (program organization is
   treelike w/ low branching factor)
   - why?
=> encapsulation is critical
   - why? it's necessary to understand the whole system - any subtree can break
     an invariant that's relied on by any other subtree - hopefully not but it's
     possible when it's mutating something accessible from its parent's scope

we can use immutable data structures and copy-on-write procedures to share
without mutating, and we can use a system of ownership to mutate without sharing.

for sharing without mutating or mutating without sharing, you have referential
transparency, which implies:
=> immutability or ownership (copy-on-write procedures)
=> parallel (without necessitating concurrent) abstractions
   - cf. java fork-join
   - cf. par monad + spark pools
   - why? procedures that are referentially transparent don't care how they're
     called, don't need to cooperate or coordinate with other procedures for 
     invocation. coordination is expensive in terms of computer time (slow) 
     and programmer time (hard to understand).
=> large, general, transparent interfaces with lots of surface area 
   - cf clojure collections
   - cf scipy, numpy
=> early-binding, static, "library" code
   - doesn't matter whether we AOT - don't need to make many runtime decisions
=> amenable to static analyses (type-driven)
=> stateless unit testing
  - cf quickcheck
  - cf boundaries
  - talk about linear / superlinear test suite runtime growth
=> very little high-level organization required
  - cf Joe Armstrong's intuition on global scope for all functions
=> encapsulation isn't as important
  - cf Hoogle

very, very interesting that all of Clojure's (and Lisp/Smalltalk/dynamic
languages more generally) polymorphism + late binding happens in the language
implementation to permit extensibility 
- 'how does procedure invocation happen?' 
- 'what is a function?'
- 'what is permitted in the syntax' 
- 'what control structures can we express'

This enables Clojure's 'frameworkless web development' - this is broadly true of
other dynamic languages, because the polymorphism you need to express is inherent
in the language. (cf. frameworkless javascript, microframeworks in Ruby, etc.)

possible counterexample: Java and Dropwizard?

vs. C/C++/Java where polymorphism + late binding isn't how the language is implemented

Can you have 'frameworkless web development' (for example) in languages without
language-level extensibility?

Look for static languages with frameworkless web development - maybe Snap in the
Haskell world?

the scarcity of computer memory (and clockspeed) necessitated shared mutable
state. shared mutable state makes programming hard. coordinating mutating
processes is expensive - a lot of care must be put into the hierarchy and
organization of those processes. frameworks save you a lot of hierarchy and
organization cost, but they need a way to do structured indirection so that can
call the code that "you" write. structured indirection => "objects",
polymorphism, late binding (c.f. "Why Objects Are Inevitable" - Cook)

something changed: computers increased their speed and storage capacity by
unimaginable amounts. when we can snapshot and synchronize data "quickly
enough", we don't have to program with shared mutable state - the organization
of code is not as important because procedures can be referentially
transparent, which led to a shift to much flatter program hierarchies, less
organization, and a shift away from the need for structured indirection,
frameworks, polymorphism, and objects.
